Only in mpssh: .git
diff -u mpssh-1.1/README mpssh/README
--- mpssh-1.1/README	2011-04-26 10:41:39.000000000 -0700
+++ mpssh/README	2011-04-26 10:50:42.000000000 -0700
@@ -6,7 +6,8 @@
 sessions. Then it reads the output from each ssh session and prints it on
 the screen prepending the machine name and the descriptor name (stdout/err).
 The number of parallel sessions N, the filename of the list of machine
-and the username to login as are user configurable.
+and the username to login as are user configurable on the command line.
+You are also able to specify the user in the host file (user@host).
 
 mpssh uses the ssh binary from the openssh package.
 there are no other external dependancies
diff -u mpssh-1.1/host.c mpssh/host.c
--- mpssh-1.1/host.c	2011-04-26 10:41:39.000000000 -0700
+++ mpssh/host.c	2011-04-26 10:46:21.000000000 -0700
@@ -25,7 +25,6 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#include "mpssh.h"
 #include "host.h"
 
 /*
@@ -33,8 +32,9 @@
  * linked list containing the hosts read from the file.
  * it is used internally by host_add().
  */
+
 host*
-host_new(char *name)
+host_new(char *name, char *user)
 {
 	host *hst;
 	if (!(hst = malloc(sizeof(host)))) {
@@ -42,6 +42,12 @@
 		exit(1);
 	}
 	strncpy(hst->name, name, sizeof(hst->name));
+
+    if (user)
+        strncpy(hst->user, user, sizeof(hst->user));
+    else
+        hst->user[0] = '\0';
+
 	hst->next = NULL;
 	return(hst);
 }
@@ -51,10 +57,10 @@
  * linked list.
  */
 host*
-host_add(host *hst, char *name)
+host_add(host *hst, char *name, char *user)
 {
-	if (!hst) return(host_new(name));
-	hst->next = host_add(hst->next, name);
+	if (!hst) return(host_new(name, user));
+	hst->next = host_add(hst->next, name, user);
 	return(hst->next);
 }
 
@@ -69,6 +75,8 @@
 	host	*head;
 	host	*hst;
 	char	 line[MAXNAME];
+	char	 host_line[MAXNAME];
+    char     user[MAXUSER];
 	int	linelen;
 
 	if (!fname)
@@ -76,16 +84,43 @@
 	hstlist = fopen(fname, "r");
 	if (!hstlist)
 		return(NULL);
-	head = host_new("");
+	head = host_new("", NULL);
 	hst = head;
+    char tok[] = "@";
+    char *res = NULL;
+
 	while (fgets(line, sizeof(line), hstlist)) {
-		if (sscanf(line, "%[A-Za-z0-9-.]", line) != 1)
+
+		if (sscanf(line, "%[A-Za-z0-9-.@]", line) != 1)
 			continue;
-		hst = host_add(hst, line);
+
+        if (strpbrk(line, "@") != NULL) {
+
+            res = strtok(line, tok);
+            int i = 0;
+            while (res != NULL) {
+                if (i == 0) {
+                    strncpy(user, res, sizeof(user));
+                }
+                else {
+                    res = strtok(NULL, tok);
+                    if (res == NULL)
+                        continue;
+                    strncpy(host_line, res, sizeof(host_line));
+                }
+                i++;
+            }
+            hst = host_add(hst, host_line, user);
+		    linelen = strlen(host_line);
+        }
+        else {
+            hst = host_add(hst, line, NULL);
+		    linelen = strlen(line);
+        }
+
 		/* keep track of the longest line */
-		linelen = strlen(line);
 		if (linelen > host_len_max)
-			host_len_max = linelen; 
+			host_len_max = linelen;
 		hostcount++;
 	}
 	fclose(hstlist);
diff -u mpssh-1.1/host.h mpssh/host.h
--- mpssh-1.1/host.h	2011-04-26 10:41:39.000000000 -0700
+++ mpssh/host.h	2011-04-25 10:30:47.000000000 -0700
@@ -25,12 +25,14 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include "mpssh.h"
 #define MAXNAME 255 /* max hostname len */
 
 /* host list structs */
 struct
 host {
 	char    name[MAXNAME];
+    char    user[MAXUSER];
 	struct  host  *next;
 };
 
diff -u mpssh-1.1/mpssh.c mpssh/mpssh.c
--- mpssh-1.1/mpssh.c	2011-04-26 10:41:39.000000000 -0700
+++ mpssh/mpssh.c	2011-04-26 10:41:16.000000000 -0700
@@ -44,11 +44,12 @@
 const char Rev[] = "$Rev: 4967 $";
 
 /* global vars */
-procslt	*pslot_ptr   = NULL;
-char	*cmd         = NULL;
-char	*user        = NULL;
-char	*fname       = NULL;
-char   *outdir       = NULL;
+procslt	*pslot_ptr     = NULL;
+char	*cmd           = NULL;
+char	*user          = NULL;
+char	*fallback_user = NULL;
+char	*fname         = NULL;
+char    *outdir        = NULL;
 int	children     = 0;
 int	maxchld      = 0;
 int	blind        = 0;
@@ -105,19 +106,34 @@
 void
 child()
 {
-	char	login[LOGLEN];
+
+    char	login[LOGLEN];
 
 	pslot_ptr->pid = 0;
 	close(pslot_ptr->io.out[0]);
 	close(pslot_ptr->io.err[0]);
+
 	if (dup2(pslot_ptr->io.out[1], 1) == -1)
 		fprintf(stderr, "stdout dup fail %s\n",
 			 strerror(errno));
+
 	if (dup2(pslot_ptr->io.err[1], 2) == -1)
 		fprintf(stderr, "stderr dup fail %s\n",
 			 strerror(errno));
-	snprintf(login, sizeof(login), "%s@%s",
-		user, pslot_ptr->hst->name);
+
+    if (user) {
+        snprintf(login, sizeof(login), "%s@%s",
+            user, pslot_ptr->hst->name);
+    }
+    else if (pslot_ptr->hst->user[0] != '\0' && !user) {
+        snprintf(login, sizeof(login), "%s@%s",
+            pslot_ptr->hst->user, pslot_ptr->hst->name);
+    }
+    else {
+        snprintf(login, sizeof(login), "%s@%s",
+            fallback_user, pslot_ptr->hst->name);
+    }
+
 	execl(SSHPATH, "ssh", SSHOPTS, hkey_check?HKCHK_Y:HKCHK_N,
 			login, cmd, NULL);
 	fprintf(stderr, "exec of %s %s \"%s\" failed\n",
@@ -134,7 +150,7 @@
 {
 	printf( "\n  Usage: mpssh [-u username] [-p numprocs] [-f hostlist]\n"
 		"               [-e] [-b] [-o /some/dir] [-s] [-v] <command>\n\n"
-		"    -u username to login as\n"
+		"    -u username to login as (defaults to current user or specified in file)\n"
 		"    -p number of parallel ssh sessions\n"
 		"    -f file to read the host list from\n"
 		"    -e print the return code on exit\n"
@@ -234,7 +250,7 @@
 
 	if (!user) {
 		pw = getpwuid(getuid());
-		user = pw->pw_name;
+		fallback_user = pw->pw_name;
 	}
 
 	if (blind && !outdir)
@@ -243,12 +259,9 @@
 	if (!(hst = host_readlist(fname?fname:HSTLIST)))
 		usage("problem with file");
 
-	printf( "MPSSH - Mass Parallel Ssh %s\n"
-		"(c)2005-2008 N.Denev <ndenev@gmail.com>\n"
-		"%s\n\n"
-		"  [*] read (%d) hosts from the list\n"
-		"  [*] executing \"%s\" as user \"%s\" on each\n",
-		Rev, Ident, hostcount, cmd, user);
+	printf("  [*] read (%d) hosts from the list\n"
+		   "  [*] executing \"%s\" on each\n",
+		   hostcount, cmd);
 	if (!hkey_check)
 		printf("  [*] strict host key check disabled\n");
 	if (blind)
diff -u mpssh-1.1/mpssh.man mpssh/mpssh.man
--- mpssh-1.1/mpssh.man	2011-04-26 10:41:39.000000000 -0700
+++ mpssh/mpssh.man	2011-04-26 10:52:42.000000000 -0700
@@ -33,9 +33,9 @@
 .It Fl o Ar directory 
 This option creates files in "directory" named after each host name listed in the "hosts" file and saves the output received from the remotely executed command there.
 .It Fl u Ar username
-This forces ssh to use the supplied username instead of the username of the current user.
+This forces ssh to use the supplied username instead of the username of the current user or the user specified in the host list.
 .It Fl f Ar hosts
-A file containing a list of hosts to whom we are going to connect. One host per line. Lines starting with # are skipped.
+A file containing a list of hosts to whom we are going to connect. One host per line. Lines starting with # are skipped. You may also specify a user to connect as with the user@host format.
 .It Fl p Ar procs
 Spawn up-to "procs" number of ssh processes in parallel.
 .El
